/*
 * Graph data structure
 */
import java.util.*;

class Graph {
	
	ArrayList<vertex> V;
	ArrayList<edge> E;
	
	public Graph() {
		V = new ArrayList<vertex>();
		E = new ArrayList<edge>();
	}
	
	/**
	 * Adds new vertex to graph
	 * @param newVertexID - ID number of vertex
	 */
	public void addVertex(vertex newVertex) {
		V.add(newVertex);
	}
	
	/**
	 * Adds new edge to graph
	 * @param one - first vertex of edge
	 * @param two - second vertex of edge
	 * @param edgeWeight - weight of edge
	 */
	public void addEdge(vertex one, vertex two, int edgeWeight) {
		E.add(new edge(one, two, edgeWeight));
	}
	
	/**
	 * Displays list of vertices
	 */
	public void verticesToString() {
		for(int i = 0; i<V.size(); i++) {
			System.out.println(V.get(i).getID());
		}
	}
	
	/**
	 * Displays edges as "Vertex A, Vertex B, Weight"
	 */
	public void edgesToString() {
		for(int i = 0; i<E.size();i++) {
			System.out.println(E.get(i).getA() + ", " + E.get(i).getB() + ", " + E.get(i).getWeight());
		}
	}
	
	/**
	 * Orders edge weight from least to greatest
	 */
	public void orderEdges() {
		int n = E.size();
		
        for (int i = 0; i < n-1; i++) 
        { 
            // Find the minimum element in unsorted array 
            int min = i; 
            for (int j = i+1; j < n; j++) 
                if (E.get(j).getWeight() < E.get(min).getWeight()) {
                    min = j;
                }
  
            // Swap the found minimum element with the first 
            // element 
            edge temp = E.get(min); 
            E.set(min, E.get(i)); 
            E.set(i, temp); 
        } 
	}
}
